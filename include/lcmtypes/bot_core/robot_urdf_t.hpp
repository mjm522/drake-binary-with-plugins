/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __bot_core_robot_urdf_t_hpp__
#define __bot_core_robot_urdf_t_hpp__

#include "lcm/lcm_coretypes.h"

#include <string>

namespace bot_core
{

class robot_urdf_t
{
    public:
        int64_t    utime;

        std::string robot_name;

        std::string urdf_xml_string;

        int8_t     left_hand;

        int8_t     right_hand;

    public:
        static constexpr int8_t   LEFT_NONE = 0;
        static constexpr int8_t   RIGHT_NONE = 1;
        static constexpr int8_t   LEFT_SANDIA = 2;
        static constexpr int8_t   RIGHT_SANDIA = 3;
        static constexpr int8_t   LEFT_IROBOT = 4;
        static constexpr int8_t   RIGHT_IROBOT = 5;
        static constexpr int8_t   LEFT_ROBOTIQ = 6;
        static constexpr int8_t   RIGHT_ROBOTIQ = 7;
        static constexpr int8_t   LEFT_UNKNOWN = 8;
        static constexpr int8_t   RIGHT_UNKNOWN = 9;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "robot_urdf_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int robot_urdf_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robot_urdf_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int robot_urdf_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t robot_urdf_t::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* robot_urdf_t::getTypeName()
{
    return "robot_urdf_t";
}

int robot_urdf_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* robot_name_cstr = const_cast<char*>(this->robot_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &robot_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* urdf_xml_string_cstr = const_cast<char*>(this->urdf_xml_string.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &urdf_xml_string_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->left_hand, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->right_hand, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robot_urdf_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __robot_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__robot_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__robot_name_len__ > maxlen - pos) return -1;
    this->robot_name.assign(
        static_cast<const char*>(buf) + offset + pos, __robot_name_len__ - 1);
    pos += __robot_name_len__;

    int32_t __urdf_xml_string_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__urdf_xml_string_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__urdf_xml_string_len__ > maxlen - pos) return -1;
    this->urdf_xml_string.assign(
        static_cast<const char*>(buf) + offset + pos, __urdf_xml_string_len__ - 1);
    pos += __urdf_xml_string_len__;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->left_hand, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->right_hand, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robot_urdf_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += this->robot_name.size() + 4 + 1;
    enc_size += this->urdf_xml_string.size() + 4 + 1;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t robot_urdf_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x0183a210f928d42bLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
