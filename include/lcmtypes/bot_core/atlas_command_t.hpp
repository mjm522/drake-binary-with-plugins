/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __bot_core_atlas_command_t_hpp__
#define __bot_core_atlas_command_t_hpp__

#include "lcm/lcm_coretypes.h"

#include <vector>
#include <string>

namespace bot_core
{

/**
 *  
 * modeled after the DRCSIM AtlasCommand ROS message, but updated for the atlas hardware API.
 * control parameter spec:
 *  
 *   q, qd, f are sensed position, velocity, torque, from AtlasJointState
 *   q_d, qd_d, f_d are desired position, velocity, torque, from
 *   AtlasJointDesired
 *   The final joint command will be:
 *    k_q_p   * ( q_d - q )     +
 *    k_q_i   * 1/s * ( q_d - q ) +
 *    k_qd_p  * ( qd_d - qd )   +
 *    k_f_p   * ( f_d - f )     +
 *    ff_qd   * qd        +
 *    ff_qd_d   * qd_d        +
 *    ff_f_d  * f_d         +
 *    ff_const
 *
 */
class atlas_command_t
{
    public:
        int64_t    utime;

        int32_t    num_joints;

        std::vector< std::string > joint_names;

        std::vector< double > position;

        std::vector< double > velocity;

        std::vector< double > effort;

        std::vector< double > k_q_p;

        /// corresponds to kp_position in drcsim API
        std::vector< double > k_q_i;

        /// corresponds to ki_position in drcsim API
        std::vector< double > k_qd_p;

        /// corresponds to kp_velocity in drcsim API
        std::vector< double > k_f_p;

        std::vector< double > ff_qd;

        /// maps to kd_position in drcsim API (there isnt an equivalent gain in the bdi api)
        std::vector< double > ff_qd_d;

        std::vector< double > ff_f_d;

        std::vector< double > ff_const;

        /**
         * k_torque can be an unsigned int 8value from 0 to 255, 
         * at run time, a double between 0 and 1 is obtained
         * by dividing by 255.0d.
         */
        std::vector< uint8_t > k_effort;

        /**
         * for controlling tradeoff between BDI/user control in SIM ONLY
         * double i_effort_min [num_joints]; // SIM ONLY --- disabled because we never use it
         * double i_effort_max [num_joints]; // SIM ONLY
         * max allowed controller update period in milli-seconds simulation time 
         * for controller synchronization. See SynchronizationStatistics.msg for 
         * tracking synchronization status.
         */
        uint8_t    desired_controller_period_ms;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "atlas_command_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int atlas_command_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int atlas_command_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int atlas_command_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t atlas_command_t::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* atlas_command_t::getTypeName()
{
    return "atlas_command_t";
}

int atlas_command_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_joints, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_joints; a0++) {
        char* __cstr = const_cast<char*>(this->joint_names[a0].c_str());
        tlen = __string_encode_array(
            buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->position[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->velocity[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->effort[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->k_q_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->k_q_i[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->k_qd_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->k_f_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ff_qd[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ff_qd_d[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ff_f_d[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ff_const[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->k_effort[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->desired_controller_period_ms, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int atlas_command_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_joints, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->joint_names.resize(this->num_joints);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_joints; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(
            buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->joint_names[a0].assign(static_cast<const char*>(buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    if(this->num_joints) {
        this->position.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->position[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->velocity.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->velocity[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->effort.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->effort[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->k_q_p.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->k_q_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->k_q_i.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->k_q_i[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->k_qd_p.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->k_qd_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->k_f_p.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->k_f_p[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->ff_qd.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ff_qd[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->ff_qd_d.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ff_qd_d[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->ff_f_d.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ff_f_d[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->ff_const.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ff_const[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_joints) {
        this->k_effort.resize(this->num_joints);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->k_effort[0], this->num_joints);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->desired_controller_period_ms, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int atlas_command_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_joints; a0++) {
        enc_size += this->joint_names[a0].size() + 4 + 1;
    }
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __byte_encoded_array_size(NULL, this->num_joints);
    enc_size += __byte_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t atlas_command_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x1b307c611a471a89LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
