/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __bot_core_system_status_t_hpp__
#define __bot_core_system_status_t_hpp__

#include "lcm/lcm_coretypes.h"

#include <string>

namespace bot_core
{

/// status of the robot system
class system_status_t
{
    public:
        int64_t    utime;

        int8_t     system;

        int8_t     importance;

        int8_t     frequency;

        std::string value;

    public:
        /**
         * previous:
         * int32_t     level; 
         * 0=very important but infrequent eg new feature/pose in sam map, mission status
         * 1=important but infrequent eg GPS fix
         * 2=somewhat important but infrequent eg ping number summary?
         * 3=very important but very frequent eg distance/heading to target (from MissionController.cpp)
         * 4=important but very frequent
         * 5=somewhat important but very frequent
         * enum for system
         */
        static constexpr int8_t   MESSAGING = 0;
        /// info about message passing and networking
        static constexpr int8_t   MOTION_ESTIMATION = 1;
        static constexpr int8_t   TRACKING = 2;
        static constexpr int8_t   CONTROL = 3;
        static constexpr int8_t   GRASPING = 4;
        static constexpr int8_t   DRIVING = 5;
        static constexpr int8_t   PLANNING_BASE = 6;
        static constexpr int8_t   PLANNING_ROBOT = 7;
        static constexpr int8_t   FALL_DETECTOR = 8;
        /// enum for importance
        static constexpr int8_t   VERY_IMPORTANT = 0;
        static constexpr int8_t   IMPORTANT = 1;
        static constexpr int8_t   UNIMPORTANT = 2;
        /// enum for frequency
        static constexpr int8_t   LOW_FREQUENCY = 0;
        static constexpr int8_t   MEDIUM_FREQUENCY = 1;
        static constexpr int8_t   HIGH_FREQUENCY = 2;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "system_status_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int system_status_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int system_status_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int system_status_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t system_status_t::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* system_status_t::getTypeName()
{
    return "system_status_t";
}

int system_status_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->system, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->importance, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->frequency, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* value_cstr = const_cast<char*>(this->value.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &value_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int system_status_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->system, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->importance, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->frequency, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __value_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__value_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__value_len__ > maxlen - pos) return -1;
    this->value.assign(
        static_cast<const char*>(buf) + offset + pos, __value_len__ - 1);
    pos += __value_len__;

    return pos;
}

int system_status_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->value.size() + 4 + 1;
    return enc_size;
}

uint64_t system_status_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x1163e61b7484cf5bLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
