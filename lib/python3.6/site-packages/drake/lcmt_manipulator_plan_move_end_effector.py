"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.position_3d_t

class lcmt_manipulator_plan_move_end_effector(object):
    __slots__ = ["timestamp", "num_steps", "utimes", "poses", "order_of_interpolation"]

    __typenames__ = ["int64_t", "int32_t", "int64_t", "bot_core.position_3d_t", "int32_t"]

    __dimensions__ = [None, None, ["num_steps"], ["num_steps"], None]

    def __init__(self):
        self.timestamp = 0
        self.num_steps = 0
        self.utimes = []
        self.poses = []
        self.order_of_interpolation = 0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_manipulator_plan_move_end_effector._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_steps))
        buf.write(struct.pack('>%dq' % self.num_steps, *self.utimes[:self.num_steps]))
        for i0 in range(self.num_steps):
            assert self.poses[i0]._get_packed_fingerprint() == bot_core.position_3d_t._get_packed_fingerprint()
            self.poses[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.order_of_interpolation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_manipulator_plan_move_end_effector._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_manipulator_plan_move_end_effector._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_manipulator_plan_move_end_effector()
        self.timestamp, self.num_steps = struct.unpack(">qi", buf.read(12))
        self.utimes = struct.unpack('>%dq' % self.num_steps, buf.read(self.num_steps * 8))
        self.poses = []
        for i0 in range(self.num_steps):
            self.poses.append(bot_core.position_3d_t._decode_one(buf))
        self.order_of_interpolation = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_manipulator_plan_move_end_effector in parents: return 0
        newparents = parents + [lcmt_manipulator_plan_move_end_effector]
        tmphash = (0x2b38776d27dbf67b+ bot_core.position_3d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_manipulator_plan_move_end_effector._packed_fingerprint is None:
            lcmt_manipulator_plan_move_end_effector._packed_fingerprint = struct.pack(">Q", lcmt_manipulator_plan_move_end_effector._get_hash_recursive([]))
        return lcmt_manipulator_plan_move_end_effector._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

