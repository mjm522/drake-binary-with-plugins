"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_plan_eval_debug_info(object):
    __slots__ = ["timestamp", "num_dof", "dof_names", "nominal_q", "nominal_v", "nominal_vd"]

    __typenames__ = ["int64_t", "int32_t", "string", "double", "double", "double"]

    __dimensions__ = [None, None, ["num_dof"], ["num_dof"], ["num_dof"], ["num_dof"]]

    def __init__(self):
        self.timestamp = 0
        self.num_dof = 0
        self.dof_names = []
        self.nominal_q = []
        self.nominal_v = []
        self.nominal_vd = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_plan_eval_debug_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_dof))
        for i0 in range(self.num_dof):
            __dof_names_encoded = self.dof_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__dof_names_encoded)+1))
            buf.write(__dof_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_dof, *self.nominal_q[:self.num_dof]))
        buf.write(struct.pack('>%dd' % self.num_dof, *self.nominal_v[:self.num_dof]))
        buf.write(struct.pack('>%dd' % self.num_dof, *self.nominal_vd[:self.num_dof]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_plan_eval_debug_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_plan_eval_debug_info._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_plan_eval_debug_info()
        self.timestamp, self.num_dof = struct.unpack(">qi", buf.read(12))
        self.dof_names = []
        for i0 in range(self.num_dof):
            __dof_names_len = struct.unpack('>I', buf.read(4))[0]
            self.dof_names.append(buf.read(__dof_names_len)[:-1].decode('utf-8', 'replace'))
        self.nominal_q = struct.unpack('>%dd' % self.num_dof, buf.read(self.num_dof * 8))
        self.nominal_v = struct.unpack('>%dd' % self.num_dof, buf.read(self.num_dof * 8))
        self.nominal_vd = struct.unpack('>%dd' % self.num_dof, buf.read(self.num_dof * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_plan_eval_debug_info in parents: return 0
        tmphash = (0x52df8f609669fb36) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_plan_eval_debug_info._packed_fingerprint is None:
            lcmt_plan_eval_debug_info._packed_fingerprint = struct.pack(">Q", lcmt_plan_eval_debug_info._get_hash_recursive([]))
        return lcmt_plan_eval_debug_info._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

